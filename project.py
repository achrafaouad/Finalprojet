# -*- coding: utf-8 -*-
"""
/***************************************************************************
 project
                                 A QGIS plugin
 project
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-06-23
        git sha              : $Format:%H$
        copyright            : (C) 2021 by achrafaouad
        email                : achrafaouad7@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from PyQt5.QtWidgets import QAction
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from pathlib import Path
from qgis.core import (
    QgsProject,
    QgsVectorLayer,
    QgsFields,
    QgsField,
    QgsGeometry,
    QgsFeature,
    Qgis
    
)
import processing
from qgis.analysis import *
from PyQt5.QtCore import *
from qgis.core import *
from qgis.utils import iface
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .project_dialog import projectDialog
import os.path


class project:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        self.fn=""
        self.name=""
        self.listOfLayers=[]
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'project_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&project')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('project', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/project/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&project'),
                action)
            self.iface.removeToolBarIcon(action)
    def addPoint(self,X,Y):
        self.path_name= self.dlg.lineEdit_7.text()
        self.name = self.dlg.lineEdit_6.text()
        self.fn=str(self.path_name)+"\\"+str(self.name)+".shp"
        layerFields=QgsFields()
        layerFields.append(QgsField('id',QVariant.Int))
        layerFields=QgsFields()
        layerFields.append(QgsField('id',QVariant.Int))
        layerFields.append(QgsField('Value',QVariant.Double))
        layerFields.append(QgsField('name',QVariant.String))
        self.writer=QgsVectorFileWriter(self.fn,'UTF-8',layerFields,QgsWkbTypes.Point,QgsCoordinateReferenceSystem('EPSG:1166'),'ESRI Shapefile')
        feat=QgsFeature()
        feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(X,Y)))
        feat.setAttributes([1,1.1,'my_point'])
        self.writer.addFeature(feat)
        iface.addVectorLayer(self.fn, '', 'ogr')
        #if(self.dlg.checkBox.isChecked()):
            #print("hello world")
        del(self.writer)
        self.createBuffer()

    def select_output_file(self):
        path = Path(__file__).parent.absolute()
        self.dlg.lineEdit_7.setText(str(path))
    
    def createBuffer(self):
        input = str(Path(__file__).parent.absolute()) +"\\"+ self.name+".shp"
        OutputFile = str(Path(__file__).parent.absolute()) +"\\"+ self.name+"Buffer"+".shp"
        processing.run("native:buffer",{'INPUT':input,'DISTANCE':int(self.dlg.lineEdit_3.text()),'OUTPUT':OutputFile})
        iface.addVectorLayer(OutputFile, '', 'ogr')
        iface.zoomToActiveLayer()
    
    def get_layer_By_Name(self, layerName):
        # layers = QgsProject.instance().layerTreeRoot().children()
            for ly in self.layers:
                print("my layer is " + ly.name()  +" " + layerName)
                if ly.name() == layerName:
                    return ly

    def intersect(self,firstLayer,secondLayer):
        """a = processing.run("qgis:selectbylocation", {
            "INPUT": self.get_layer_By_Name(firstLayer),
            "PREDICATE": 0,
           "INTERSECT": self.get_layer_By_Name(secondLayer),
            "METHOD": 0
        })
        print(a)
        """
        output = str(Path(__file__).parent.absolute()) +"\\"+ "intersect.shp"
        processing.run('qgis:intersection', self.get_layer_By_Name(firstLayer), self.get_layer_By_Name(secondLayer), output)
        iface.addVectorLayer(output, '', 'ogr')


    def Verify(self):
        self.listOfLayers.clear()

        if(self.dlg.checkBox.isChecked()):
            self.listOfLayers.append(self.dlg.checkBox.text())
            print("added"+self.dlg.checkBox.text())
        if(self.dlg.checkBox_2.isChecked()):
            self.listOfLayers.append(self.dlg.checkBox_2.text())
            print("added"+self.dlg.checkBox_2.text())
        if(self.dlg.checkBox_3.isChecked()):
            self.listOfLayers.append(self.dlg.checkBox_3.text())
            print("added"+self.dlg.checkBox_3.text())
        if(self.dlg.checkBox_4.isChecked()):
            self.listOfLayers.append(self.dlg.checkBox_4.text())
            print("added"+self.dlg.checkBox_4.text())
        if(self.dlg.checkBox_5.isChecked()):
            self.listOfLayers.append(self.dlg.checkBox_5.text())
            print("added"+self.dlg.checkBox_5.text())
        print(self.listOfLayers)
        print(self.listOfLayers[0],self.listOfLayers[1])
        if(len(self.listOfLayers) == 2):
            self.intersect(self.listOfLayers[0],self.listOfLayers[1])
        
        else:
            for i in range(len(self.listOfLayers)-2):
                self.intersect(self.listOfLayers[i],self.listOfLayers[i+1])


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = projectDialog()
        project = QgsProject.instance()
        projectName = QgsProject.instance().fileName()
        My_list = projectName.split("/")
        name =My_list[len(My_list)-1]
        print(name)
        project.read(name)
        self.layers = [layer for layer in project.mapLayers().values()]
        path = self.dlg.pushButton_2
        path.clicked.connect(lambda: self.select_output_file())
        
        
        submit = self.dlg.pushButton
        submit.clicked.connect(lambda: self.addPoint(int(self.dlg.lineEdit_5.text()),int(self.dlg.lineEdit_4.text())))


        self.dlg.intersect.clicked.connect(lambda: self.Verify())


        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
